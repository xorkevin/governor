// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"database/sql"
	"fmt"
	"strings"
)

func invModelSetup(db *sql.DB, tableName string) error {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS " + tableName + " (userid VARCHAR(31), invited_by VARCHAR(31), PRIMARY KEY (userid, invited_by), creation_time BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS " + tableName + "_creation_time_index ON " + tableName + " (creation_time);")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS " + tableName + "_userid__creation_time_index ON " + tableName + " (userid, creation_time);")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS " + tableName + "_invited_by__creation_time_index ON " + tableName + " (invited_by, creation_time);")
	if err != nil {
		return err
	}
	return nil
}

func invModelInsert(db *sql.DB, tableName string, m *Model) error {
	_, err := db.Exec("INSERT INTO "+tableName+" (userid, invited_by, creation_time) VALUES ($1, $2, $3);", m.Userid, m.InvitedBy, m.CreationTime)
	if err != nil {
		return err
	}
	return nil
}

func invModelInsertBulk(db *sql.DB, tableName string, models []*Model, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*3)
	for c, m := range models {
		n := c * 3
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d)", n+1, n+2, n+3))
		args = append(args, m.Userid, m.InvitedBy, m.CreationTime)
	}
	_, err := db.Exec("INSERT INTO "+tableName+" (userid, invited_by, creation_time) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func invModelDelEqUserid(db *sql.DB, tableName string, userid string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE userid = $1;", userid)
	return err
}

func invModelGetModelEqUseridEqInvitedByGtCreationTime(db *sql.DB, tableName string, userid string, invitedby string, creationtime int64) (*Model, error) {
	m := &Model{}
	if err := db.QueryRow("SELECT userid, invited_by, creation_time FROM "+tableName+" WHERE userid = $1 AND invited_by = $2 AND creation_time > $3;", userid, invitedby, creationtime).Scan(&m.Userid, &m.InvitedBy, &m.CreationTime); err != nil {
		return nil, err
	}
	return m, nil
}

func invModelDelEqUseridEqInvitedBy(db *sql.DB, tableName string, userid string, invitedby string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE userid = $1 AND invited_by = $2;", userid, invitedby)
	return err
}

func invModelDelEqUseridHasInvitedBy(db *sql.DB, tableName string, userid string, invitedby []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(invitedby))
	args = append(args, userid)
	var placeholdersinvitedby string
	{
		placeholders := make([]string, 0, len(invitedby))
		for _, i := range invitedby {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersinvitedby = strings.Join(placeholders, ", ")
	}
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE userid = $1 AND invited_by IN (VALUES "+placeholdersinvitedby+");", args...)
	return err
}

func invModelGetModelEqUseridGtCreationTimeOrdCreationTime(db *sql.DB, tableName string, userid string, creationtime int64, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid, invited_by, creation_time FROM "+tableName+" WHERE userid = $3 AND creation_time > $4 ORDER BY creation_time "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid, creationtime)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid, &m.InvitedBy, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func invModelGetModelEqInvitedByGtCreationTimeOrdCreationTime(db *sql.DB, tableName string, invitedby string, creationtime int64, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid, invited_by, creation_time FROM "+tableName+" WHERE invited_by = $3 AND creation_time > $4 ORDER BY creation_time "+order+" LIMIT $1 OFFSET $2;", limit, offset, invitedby, creationtime)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid, &m.InvitedBy, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func invModelDelLeqCreationTime(db *sql.DB, tableName string, creationtime int64) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE creation_time <= $1;", creationtime)
	return err
}
