// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"database/sql"
	"fmt"
	"strings"
)

func friendModelSetup(db *sql.DB, tableName string) error {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS " + tableName + " (userid_1 VARCHAR(31), userid_2 VARCHAR(31), PRIMARY KEY (userid_1, userid_2), username VARCHAR(255) NOT NULL);")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS " + tableName + "_userid_2_index ON " + tableName + " (userid_2);")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS " + tableName + "_userid_1__username_index ON " + tableName + " (userid_1, username);")
	if err != nil {
		return err
	}
	return nil
}

func friendModelInsert(db *sql.DB, tableName string, m *Model) error {
	_, err := db.Exec("INSERT INTO "+tableName+" (userid_1, userid_2, username) VALUES ($1, $2, $3);", m.Userid1, m.Userid2, m.Username)
	if err != nil {
		return err
	}
	return nil
}

func friendModelInsertBulk(db *sql.DB, tableName string, models []*Model, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*3)
	for c, m := range models {
		n := c * 3
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d)", n+1, n+2, n+3))
		args = append(args, m.Userid1, m.Userid2, m.Username)
	}
	_, err := db.Exec("INSERT INTO "+tableName+" (userid_1, userid_2, username) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func friendModelGetModelEqUserid1EqUserid2(db *sql.DB, tableName string, userid1 string, userid2 string) (*Model, error) {
	m := &Model{}
	if err := db.QueryRow("SELECT userid_1, userid_2, username FROM "+tableName+" WHERE userid_1 = $1 AND userid_2 = $2;", userid1, userid2).Scan(&m.Userid1, &m.Userid2, &m.Username); err != nil {
		return nil, err
	}
	return m, nil
}

func friendModelGetModelEqUserid1HasUserid2OrdUserid2(db *sql.DB, tableName string, userid1 string, userid2 []string, orderasc bool, limit, offset int) ([]Model, error) {
	paramCount := 3
	args := make([]interface{}, 0, paramCount+len(userid2))
	args = append(args, limit, offset, userid1)
	var placeholdersuserid2 string
	{
		placeholders := make([]string, 0, len(userid2))
		for _, i := range userid2 {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersuserid2 = strings.Join(placeholders, ", ")
	}
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid_1, userid_2, username FROM "+tableName+" WHERE userid_1 = $3 AND userid_2 IN (VALUES "+placeholdersuserid2+") ORDER BY userid_2 "+order+" LIMIT $1 OFFSET $2;", args...)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid1, &m.Userid2, &m.Username); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func friendModelGetModelEqUserid1OrdUsername(db *sql.DB, tableName string, userid1 string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid_1, userid_2, username FROM "+tableName+" WHERE userid_1 = $3 ORDER BY username "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid1)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid1, &m.Userid2, &m.Username); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func friendModelGetModelEqUserid1LikeUsernameOrdUsername(db *sql.DB, tableName string, userid1 string, username string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid_1, userid_2, username FROM "+tableName+" WHERE userid_1 = $3 AND username LIKE $4 ORDER BY username "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid1, username)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid1, &m.Userid2, &m.Username); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func friendModelUpdfriendUsernameEqUserid2(db *sql.DB, tableName string, m *friendUsername, userid2 string) error {
	_, err := db.Exec("UPDATE "+tableName+" SET (username) = ROW($1) WHERE userid_2 = $2;", m.Username, userid2)
	if err != nil {
		return err
	}
	return nil
}
