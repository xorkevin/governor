// Code generated by go generate forge model v0.4.3; DO NOT EDIT.

package friendinvmodel

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"xorkevin.dev/forge/model/sqldb"
)

type (
	invModelTable struct {
		TableName string
	}
)

func (t *invModelTable) Setup(ctx context.Context, d sqldb.Executor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (userid VARCHAR(31), invited_by VARCHAR(31), PRIMARY KEY (userid, invited_by), creation_time BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_creation_time_index ON "+t.TableName+" (creation_time);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_userid__creation_time_index ON "+t.TableName+" (userid, creation_time);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_invited_by__creation_time_index ON "+t.TableName+" (invited_by, creation_time);")
	if err != nil {
		return err
	}
	return nil
}

func (t *invModelTable) Insert(ctx context.Context, d sqldb.Executor, m *Model) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (userid, invited_by, creation_time) VALUES ($1, $2, $3);", m.Userid, m.InvitedBy, m.CreationTime)
	if err != nil {
		return err
	}
	return nil
}

func (t *invModelTable) InsertBulk(ctx context.Context, d sqldb.Executor, models []*Model, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*3)
	for c, m := range models {
		n := c * 3
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d)", n+1, n+2, n+3))
		args = append(args, m.Userid, m.InvitedBy, m.CreationTime)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (userid, invited_by, creation_time) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *invModelTable) DelEqUserid(ctx context.Context, d sqldb.Executor, userid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE userid = $1;", userid)
	return err
}

func (t *invModelTable) GetModelEqUseridEqInvitedByGtCreationTime(ctx context.Context, d sqldb.Executor, userid string, invitedby string, creationtime int64) (*Model, error) {
	m := &Model{}
	if err := d.QueryRowContext(ctx, "SELECT userid, invited_by, creation_time FROM "+t.TableName+" WHERE userid = $1 AND invited_by = $2 AND creation_time > $3;", userid, invitedby, creationtime).Scan(&m.Userid, &m.InvitedBy, &m.CreationTime); err != nil {
		return nil, err
	}
	return m, nil
}

func (t *invModelTable) DelEqUseridEqInvitedBy(ctx context.Context, d sqldb.Executor, userid string, invitedby string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE userid = $1 AND invited_by = $2;", userid, invitedby)
	return err
}

func (t *invModelTable) DelEqUseridHasInvitedBy(ctx context.Context, d sqldb.Executor, userid string, invitedbys []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(invitedbys))
	args = append(args, userid)
	var placeholdersinvitedbys string
	{
		placeholders := make([]string, 0, len(invitedbys))
		for _, i := range invitedbys {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersinvitedbys = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE userid = $1 AND invited_by IN (VALUES "+placeholdersinvitedbys+");", args...)
	return err
}

func (t *invModelTable) GetModelEqUseridGtCreationTimeOrdCreationTime(ctx context.Context, d sqldb.Executor, userid string, creationtime int64, orderasc bool, limit, offset int) (_ []Model, retErr error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT userid, invited_by, creation_time FROM "+t.TableName+" WHERE userid = $3 AND creation_time > $4 ORDER BY creation_time "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid, creationtime)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Userid, &m.InvitedBy, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *invModelTable) GetModelEqInvitedByGtCreationTimeOrdCreationTime(ctx context.Context, d sqldb.Executor, invitedby string, creationtime int64, orderasc bool, limit, offset int) (_ []Model, retErr error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT userid, invited_by, creation_time FROM "+t.TableName+" WHERE invited_by = $3 AND creation_time > $4 ORDER BY creation_time "+order+" LIMIT $1 OFFSET $2;", limit, offset, invitedby, creationtime)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Userid, &m.InvitedBy, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *invModelTable) DelLeqCreationTime(ctx context.Context, d sqldb.Executor, creationtime int64) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE creation_time <= $1;", creationtime)
	return err
}
