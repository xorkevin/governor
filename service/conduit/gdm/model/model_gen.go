// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"strings"

	"xorkevin.dev/governor/service/db"
)

type (
	gdmModelTable struct {
		TableName string
	}
)

func (t *gdmModelTable) Setup(ctx context.Context, d db.SQLExecutor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (chatid VARCHAR(31) PRIMARY KEY, name VARCHAR(255) NOT NULL, theme VARCHAR(4095) NOT NULL, last_updated BIGINT NOT NULL, creation_time BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	return nil
}

func (t *gdmModelTable) Insert(ctx context.Context, d db.SQLExecutor, m *Model) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (chatid, name, theme, last_updated, creation_time) VALUES ($1, $2, $3, $4, $5);", m.Chatid, m.Name, m.Theme, m.LastUpdated, m.CreationTime)
	if err != nil {
		return err
	}
	return nil
}

func (t *gdmModelTable) InsertBulk(ctx context.Context, d db.SQLExecutor, models []*Model, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*5)
	for c, m := range models {
		n := c * 5
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5))
		args = append(args, m.Chatid, m.Name, m.Theme, m.LastUpdated, m.CreationTime)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (chatid, name, theme, last_updated, creation_time) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *gdmModelTable) GetModelEqChatid(ctx context.Context, d db.SQLExecutor, chatid string) (*Model, error) {
	m := &Model{}
	if err := d.QueryRowContext(ctx, "SELECT chatid, name, theme, last_updated, creation_time FROM "+t.TableName+" WHERE chatid = $1;", chatid).Scan(&m.Chatid, &m.Name, &m.Theme, &m.LastUpdated, &m.CreationTime); err != nil {
		return nil, err
	}
	return m, nil
}

func (t *gdmModelTable) GetModelHasChatidOrdChatid(ctx context.Context, d db.SQLExecutor, chatid []string, orderasc bool, limit, offset int) ([]Model, error) {
	paramCount := 2
	args := make([]interface{}, 0, paramCount+len(chatid))
	args = append(args, limit, offset)
	var placeholderschatid string
	{
		placeholders := make([]string, 0, len(chatid))
		for _, i := range chatid {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholderschatid = strings.Join(placeholders, ", ")
	}
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT chatid, name, theme, last_updated, creation_time FROM "+t.TableName+" WHERE chatid IN (VALUES "+placeholderschatid+") ORDER BY chatid "+order+" LIMIT $1 OFFSET $2;", args...)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Chatid, &m.Name, &m.Theme, &m.LastUpdated, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *gdmModelTable) UpdModelEqChatid(ctx context.Context, d db.SQLExecutor, m *Model, chatid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (chatid, name, theme, last_updated, creation_time) = ROW($1, $2, $3, $4, $5) WHERE chatid = $6;", m.Chatid, m.Name, m.Theme, m.LastUpdated, m.CreationTime, chatid)
	if err != nil {
		return err
	}
	return nil
}

func (t *gdmModelTable) DelEqChatid(ctx context.Context, d db.SQLExecutor, chatid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE chatid = $1;", chatid)
	return err
}

func (t *gdmModelTable) UpdgdmPropsEqChatid(ctx context.Context, d db.SQLExecutor, m *gdmProps, chatid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (name, theme) = ROW($1, $2) WHERE chatid = $3;", m.Name, m.Theme, chatid)
	if err != nil {
		return err
	}
	return nil
}

func (t *gdmModelTable) UpdmodelLastUpdatedEqChatid(ctx context.Context, d db.SQLExecutor, m *modelLastUpdated, chatid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (last_updated) = ROW($1) WHERE chatid = $2;", m.LastUpdated, chatid)
	if err != nil {
		return err
	}
	return nil
}
