// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"strings"

	"xorkevin.dev/governor/service/db"
)

type (
	assocModelTable struct {
		TableName string
	}
)

func (t *assocModelTable) Setup(ctx context.Context, d db.SQLExecutor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (chatid VARCHAR(31), userid_1 VARCHAR(31), userid_2 VARCHAR(31), PRIMARY KEY (chatid, userid_1, userid_2), last_updated BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_userid_2_index ON "+t.TableName+" (userid_2);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_chatid__userid_2_index ON "+t.TableName+" (chatid, userid_2);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_userid_1__userid_2__last_updated_index ON "+t.TableName+" (userid_1, userid_2, last_updated);")
	if err != nil {
		return err
	}
	return nil
}

func (t *assocModelTable) Insert(ctx context.Context, d db.SQLExecutor, m *AssocModel) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (chatid, userid_1, userid_2, last_updated) VALUES ($1, $2, $3, $4);", m.Chatid, m.Userid1, m.Userid2, m.LastUpdated)
	if err != nil {
		return err
	}
	return nil
}

func (t *assocModelTable) InsertBulk(ctx context.Context, d db.SQLExecutor, models []*AssocModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*4)
	for c, m := range models {
		n := c * 4
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4))
		args = append(args, m.Chatid, m.Userid1, m.Userid2, m.LastUpdated)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (chatid, userid_1, userid_2, last_updated) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *assocModelTable) DelEqChatid(ctx context.Context, d db.SQLExecutor, chatid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE chatid = $1;", chatid)
	return err
}

func (t *assocModelTable) DelEqChatidHasUserid1(ctx context.Context, d db.SQLExecutor, chatid string, userid1 []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(userid1))
	args = append(args, chatid)
	var placeholdersuserid1 string
	{
		placeholders := make([]string, 0, len(userid1))
		for _, i := range userid1 {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersuserid1 = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE chatid = $1 AND userid_1 IN (VALUES "+placeholdersuserid1+");", args...)
	return err
}

func (t *assocModelTable) DelEqChatidHasUserid2(ctx context.Context, d db.SQLExecutor, chatid string, userid2 []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(userid2))
	args = append(args, chatid)
	var placeholdersuserid2 string
	{
		placeholders := make([]string, 0, len(userid2))
		for _, i := range userid2 {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersuserid2 = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE chatid = $1 AND userid_2 IN (VALUES "+placeholdersuserid2+");", args...)
	return err
}

func (t *assocModelTable) GetAssocModelEqUserid1EqUserid2OrdLastUpdated(ctx context.Context, d db.SQLExecutor, userid1 string, userid2 string, orderasc bool, limit, offset int) ([]AssocModel, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]AssocModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT chatid, userid_1, userid_2, last_updated FROM "+t.TableName+" WHERE userid_1 = $3 AND userid_2 = $4 ORDER BY last_updated "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid1, userid2)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := AssocModel{}
		if err := rows.Scan(&m.Chatid, &m.Userid1, &m.Userid2, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *assocModelTable) UpdmodelLastUpdatedEqChatid(ctx context.Context, d db.SQLExecutor, m *modelLastUpdated, chatid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (last_updated) = ROW($1) WHERE chatid = $2;", m.LastUpdated, chatid)
	if err != nil {
		return err
	}
	return nil
}
