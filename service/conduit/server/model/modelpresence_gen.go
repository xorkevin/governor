// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"strings"

	"xorkevin.dev/governor/service/db"
)

type (
	presenceModelTable struct {
		TableName string
	}
)

func (t *presenceModelTable) Setup(ctx context.Context, d db.SQLExecutor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (serverid VARCHAR(31), userid VARCHAR(31), PRIMARY KEY (serverid, userid), last_updated BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_serverid__last_updated_index ON "+t.TableName+" (serverid, last_updated);")
	if err != nil {
		return err
	}
	return nil
}

func (t *presenceModelTable) Insert(ctx context.Context, d db.SQLExecutor, m *PresenceModel) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (serverid, userid, last_updated) VALUES ($1, $2, $3);", m.ServerID, m.Userid, m.LastUpdated)
	if err != nil {
		return err
	}
	return nil
}

func (t *presenceModelTable) InsertBulk(ctx context.Context, d db.SQLExecutor, models []*PresenceModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*3)
	for c, m := range models {
		n := c * 3
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d)", n+1, n+2, n+3))
		args = append(args, m.ServerID, m.Userid, m.LastUpdated)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (serverid, userid, last_updated) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *presenceModelTable) DelEqServerID(ctx context.Context, d db.SQLExecutor, serverid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE serverid = $1;", serverid)
	return err
}

func (t *presenceModelTable) GetPresenceModelEqServerIDGtLastUpdatedOrdLastUpdated(ctx context.Context, d db.SQLExecutor, serverid string, lastupdated int64, orderasc bool, limit, offset int) ([]PresenceModel, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]PresenceModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT serverid, userid, last_updated FROM "+t.TableName+" WHERE serverid = $3 AND last_updated > $4 ORDER BY last_updated "+order+" LIMIT $1 OFFSET $2;", limit, offset, serverid, lastupdated)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := PresenceModel{}
		if err := rows.Scan(&m.ServerID, &m.Userid, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *presenceModelTable) DelEqServerIDLeqLastUpdated(ctx context.Context, d db.SQLExecutor, serverid string, lastupdated int64) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE serverid = $1 AND last_updated <= $2;", serverid, lastupdated)
	return err
}
