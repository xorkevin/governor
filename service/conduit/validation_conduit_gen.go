// Code generated by go generate forge validation v0.3; DO NOT EDIT.

package conduit

func (r reqGetFriends) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validoptUsername(r.Prefix); err != nil {
		return err
	}
	if err := validAmount(r.Amount); err != nil {
		return err
	}
	if err := validOffset(r.Offset); err != nil {
		return err
	}
	return nil
}

func (r reqRmFriend) valid() error {
	if err := validhasUserid(r.Userid1); err != nil {
		return err
	}
	if err := validhasUserid(r.Userid2); err != nil {
		return err
	}
	return nil
}

func (r reqAcceptFriendInvitation) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validhasUserid(r.InvitedBy); err != nil {
		return err
	}
	return nil
}

func (r reqDelFriendInvitation) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validhasUserid(r.InvitedBy); err != nil {
		return err
	}
	return nil
}

func (r reqGetFriendInvitations) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validAmount(r.Amount); err != nil {
		return err
	}
	if err := validOffset(r.Offset); err != nil {
		return err
	}
	return nil
}

func (r reqGetLatestChats) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validAmount(r.Amount); err != nil {
		return err
	}
	return nil
}

func (r reqGetChats) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validhasChatids(r.Chatids); err != nil {
		return err
	}
	return nil
}

func (r reqSearchDMs) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validhasUsername(r.Prefix); err != nil {
		return err
	}
	if err := validAmount(r.Amount); err != nil {
		return err
	}
	return nil
}

func (r reqUpdateDM) valid() error {
	if err := validhasUserid(r.Userid1); err != nil {
		return err
	}
	if err := validhasUserid(r.Userid2); err != nil {
		return err
	}
	if err := validName(r.Name); err != nil {
		return err
	}
	if err := validTheme(r.Theme); err != nil {
		return err
	}
	return nil
}

func (r reqChatID) valid() error {
	if err := validhasChatid(r.Chatid); err != nil {
		return err
	}
	return nil
}

func (r reqCreateChat) valid() error {
	if err := validKind(r.Kind); err != nil {
		return err
	}
	if err := validName(r.Name); err != nil {
		return err
	}
	if err := validTheme(r.Theme); err != nil {
		return err
	}
	if err := validhasUserids(r.Userids); err != nil {
		return err
	}
	return nil
}

func (r reqUpdateChat) valid() error {
	if err := validhasChatid(r.Chatid); err != nil {
		return err
	}
	if err := validName(r.Name); err != nil {
		return err
	}
	if err := validTheme(r.Theme); err != nil {
		return err
	}
	return nil
}

func (r reqChatMembers) valid() error {
	if err := validhasChatid(r.Chatid); err != nil {
		return err
	}
	if err := validoptUserids(r.Add); err != nil {
		return err
	}
	if err := validoptUserids(r.Remove); err != nil {
		return err
	}
	return nil
}

func (r reqLatestChats) valid() error {
	if err := validhasKind(r.Kind); err != nil {
		return err
	}
	if err := validAmount(r.Amount); err != nil {
		return err
	}
	return nil
}

func (r reqSearchChats) valid() error {
	if err := validhasKind(r.Kind); err != nil {
		return err
	}
	if err := validSearch(r.Search); err != nil {
		return err
	}
	if err := validAmount(r.Amount); err != nil {
		return err
	}
	return nil
}

func (r reqChats) valid() error {
	if err := validhasChatids(r.Chatids); err != nil {
		return err
	}
	return nil
}

func (r reqCreateMsg) valid() error {
	if err := validhasChatid(r.Chatid); err != nil {
		return err
	}
	if err := validMsgkind(r.Kind); err != nil {
		return err
	}
	if err := validMsgvalue(r.Value); err != nil {
		return err
	}
	return nil
}

func (r reqLatestMsgs) valid() error {
	if err := validhasChatid(r.Chatid); err != nil {
		return err
	}
	if err := validoptMsgkind(r.Kind); err != nil {
		return err
	}
	if err := validoptMsgid(r.Before); err != nil {
		return err
	}
	if err := validAmount(r.Amount); err != nil {
		return err
	}
	return nil
}
