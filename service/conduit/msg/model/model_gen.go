// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"strings"

	"xorkevin.dev/governor/service/db"
)

type (
	msgModelTable struct {
		TableName string
	}
)

func (t *msgModelTable) Setup(ctx context.Context, d db.SQLExecutor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (chatid VARCHAR(31), msgid VARCHAR(31), PRIMARY KEY (chatid, msgid), userid VARCHAR(31) NOT NULL, time_ms BIGINT NOT NULL, kind VARCHAR(31) NOT NULL, value VARCHAR(4095) NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_chatid__kind__msgid_index ON "+t.TableName+" (chatid, kind, msgid);")
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) Insert(ctx context.Context, d db.SQLExecutor, m *Model) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (chatid, msgid, userid, time_ms, kind, value) VALUES ($1, $2, $3, $4, $5, $6);", m.Chatid, m.Msgid, m.Userid, m.Timems, m.Kind, m.Value)
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) InsertBulk(ctx context.Context, d db.SQLExecutor, models []*Model, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*6)
	for c, m := range models {
		n := c * 6
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5, n+6))
		args = append(args, m.Chatid, m.Msgid, m.Userid, m.Timems, m.Kind, m.Value)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (chatid, msgid, userid, time_ms, kind, value) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) GetModelEqChatidOrdMsgid(ctx context.Context, d db.SQLExecutor, chatid string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT chatid, msgid, userid, time_ms, kind, value FROM "+t.TableName+" WHERE chatid = $3 ORDER BY msgid "+order+" LIMIT $1 OFFSET $2;", limit, offset, chatid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Chatid, &m.Msgid, &m.Userid, &m.Timems, &m.Kind, &m.Value); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *msgModelTable) GetModelEqChatidLtMsgidOrdMsgid(ctx context.Context, d db.SQLExecutor, chatid string, msgid string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT chatid, msgid, userid, time_ms, kind, value FROM "+t.TableName+" WHERE chatid = $3 AND msgid < $4 ORDER BY msgid "+order+" LIMIT $1 OFFSET $2;", limit, offset, chatid, msgid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Chatid, &m.Msgid, &m.Userid, &m.Timems, &m.Kind, &m.Value); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *msgModelTable) GetModelEqChatidEqKindOrdMsgid(ctx context.Context, d db.SQLExecutor, chatid string, kind string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT chatid, msgid, userid, time_ms, kind, value FROM "+t.TableName+" WHERE chatid = $3 AND kind = $4 ORDER BY msgid "+order+" LIMIT $1 OFFSET $2;", limit, offset, chatid, kind)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Chatid, &m.Msgid, &m.Userid, &m.Timems, &m.Kind, &m.Value); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *msgModelTable) GetModelEqChatidEqKindLtMsgidOrdMsgid(ctx context.Context, d db.SQLExecutor, chatid string, kind string, msgid string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT chatid, msgid, userid, time_ms, kind, value FROM "+t.TableName+" WHERE chatid = $3 AND kind = $4 AND msgid < $5 ORDER BY msgid "+order+" LIMIT $1 OFFSET $2;", limit, offset, chatid, kind, msgid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Chatid, &m.Msgid, &m.Userid, &m.Timems, &m.Kind, &m.Value); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *msgModelTable) DelEqChatid(ctx context.Context, d db.SQLExecutor, chatid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE chatid = $1;", chatid)
	return err
}

func (t *msgModelTable) UpdmsgValueEqChatidHasMsgid(ctx context.Context, d db.SQLExecutor, m *msgValue, chatid string, msgids []string) error {
	paramCount := 2
	args := make([]interface{}, 0, paramCount+len(msgids))
	args = append(args, m.Value, chatid)
	var placeholdersmsgids string
	{
		placeholders := make([]string, 0, len(msgids))
		for _, i := range msgids {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersmsgids = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (value) = ROW($1) WHERE chatid = $2 AND msgid IN (VALUES "+placeholdersmsgids+");", args...)
	if err != nil {
		return err
	}
	return nil
}
