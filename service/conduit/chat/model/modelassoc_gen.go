// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"database/sql"
	"fmt"
	"strings"
)

func assocModelSetup(db *sql.DB, tableName string) error {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS " + tableName + " (chatid VARCHAR(31), userid_1 VARCHAR(31), userid_2 VARCHAR(31), PRIMARY KEY (chatid, userid_1, userid_2), kind VARCHAR(31) NOT NULL, last_updated BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS " + tableName + "_userid_2_index ON " + tableName + " (userid_2);")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS " + tableName + "_chatid__userid_2_index ON " + tableName + " (chatid, userid_2);")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS " + tableName + "_userid_1__userid_2__kind__last_updated_index ON " + tableName + " (userid_1, userid_2, kind, last_updated);")
	if err != nil {
		return err
	}
	return nil
}

func assocModelInsert(db *sql.DB, tableName string, m *AssocModel) error {
	_, err := db.Exec("INSERT INTO "+tableName+" (chatid, userid_1, userid_2, kind, last_updated) VALUES ($1, $2, $3, $4, $5);", m.Chatid, m.Userid1, m.Userid2, m.Kind, m.LastUpdated)
	if err != nil {
		return err
	}
	return nil
}

func assocModelInsertBulk(db *sql.DB, tableName string, models []*AssocModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*5)
	for c, m := range models {
		n := c * 5
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5))
		args = append(args, m.Chatid, m.Userid1, m.Userid2, m.Kind, m.LastUpdated)
	}
	_, err := db.Exec("INSERT INTO "+tableName+" (chatid, userid_1, userid_2, kind, last_updated) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func assocModelDelEqChatid(db *sql.DB, tableName string, chatid string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE chatid = $1;", chatid)
	return err
}

func assocModelDelEqUserid1(db *sql.DB, tableName string, userid1 string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE userid_1 = $1;", userid1)
	return err
}

func assocModelDelEqChatidEqUserid1(db *sql.DB, tableName string, chatid string, userid1 string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE chatid = $1 AND userid_1 = $2;", chatid, userid1)
	return err
}

func assocModelDelEqUserid2(db *sql.DB, tableName string, userid2 string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE userid_2 = $1;", userid2)
	return err
}

func assocModelDelEqChatidEqUserid2(db *sql.DB, tableName string, chatid string, userid2 string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE chatid = $1 AND userid_2 = $2;", chatid, userid2)
	return err
}

func assocModelGetAssocModelEqUserid1EqUserid2EqKindOrdLastUpdated(db *sql.DB, tableName string, userid1 string, userid2 string, kind string, orderasc bool, limit, offset int) ([]AssocModel, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]AssocModel, 0, limit)
	rows, err := db.Query("SELECT chatid, userid_1, userid_2, kind, last_updated FROM "+tableName+" WHERE userid_1 = $3 AND userid_2 = $4 AND kind = $5 ORDER BY last_updated "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid1, userid2, kind)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := AssocModel{}
		if err := rows.Scan(&m.Chatid, &m.Userid1, &m.Userid2, &m.Kind, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func assocModelGetAssocModelEqUserid1EqUserid2EqKindLtLastUpdatedOrdLastUpdated(db *sql.DB, tableName string, userid1 string, userid2 string, kind string, lastupdated int64, orderasc bool, limit, offset int) ([]AssocModel, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]AssocModel, 0, limit)
	rows, err := db.Query("SELECT chatid, userid_1, userid_2, kind, last_updated FROM "+tableName+" WHERE userid_1 = $3 AND userid_2 = $4 AND kind = $5 AND last_updated < $6 ORDER BY last_updated "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid1, userid2, kind, lastupdated)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := AssocModel{}
		if err := rows.Scan(&m.Chatid, &m.Userid1, &m.Userid2, &m.Kind, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}
