// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"database/sql"
	"fmt"
	"strings"
)

func dmModelSetup(db *sql.DB, tableName string) error {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS " + tableName + " (userid_1 VARCHAR(31), userid_2 VARCHAR(31), PRIMARY KEY (userid_1, userid_2), chatid VARCHAR(31) NOT NULL UNIQUE);")
	if err != nil {
		return err
	}
	return nil
}

func dmModelInsert(db *sql.DB, tableName string, m *DMModel) error {
	_, err := db.Exec("INSERT INTO "+tableName+" (userid_1, userid_2, chatid) VALUES ($1, $2, $3);", m.Userid1, m.Userid2, m.Chatid)
	if err != nil {
		return err
	}
	return nil
}

func dmModelInsertBulk(db *sql.DB, tableName string, models []*DMModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*3)
	for c, m := range models {
		n := c * 3
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d)", n+1, n+2, n+3))
		args = append(args, m.Userid1, m.Userid2, m.Chatid)
	}
	_, err := db.Exec("INSERT INTO "+tableName+" (userid_1, userid_2, chatid) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func dmModelGetDMModelEqUserid1EqUserid2(db *sql.DB, tableName string, userid1 string, userid2 string) (*DMModel, error) {
	m := &DMModel{}
	if err := db.QueryRow("SELECT userid_1, userid_2, chatid FROM "+tableName+" WHERE userid_1 = $1 AND userid_2 = $2;", userid1, userid2).Scan(&m.Userid1, &m.Userid2, &m.Chatid); err != nil {
		return nil, err
	}
	return m, nil
}

func dmModelDelEqChatid(db *sql.DB, tableName string, chatid string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE chatid = $1;", chatid)
	return err
}
