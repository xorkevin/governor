// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"database/sql"
	"fmt"
	"strings"

	"github.com/lib/pq"
)

const (
	chatModelTableName = "chats"
)

func chatModelSetup(db *sql.DB) (int, error) {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS chats (chatid VARCHAR(31) PRIMARY KEY, name VARCHAR(255) NOT NULL, theme VARCHAR(4095) NOT NULL, last_updated BIGINT NOT NULL, creation_time BIGINT NOT NULL);")
	if err != nil {
		return 0, err
	}
	return 0, nil
}

func chatModelInsert(db *sql.DB, m *ChatModel) (int, error) {
	_, err := db.Exec("INSERT INTO chats (chatid, name, theme, last_updated, creation_time) VALUES ($1, $2, $3, $4, $5);", m.Chatid, m.Name, m.Theme, m.LastUpdated, m.CreationTime)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func chatModelInsertBulk(db *sql.DB, models []*ChatModel, allowConflict bool) (int, error) {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*5)
	for c, m := range models {
		n := c * 5
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5))
		args = append(args, m.Chatid, m.Name, m.Theme, m.LastUpdated, m.CreationTime)
	}
	_, err := db.Exec("INSERT INTO chats (chatid, name, theme, last_updated, creation_time) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func chatModelUpdChatModelEqChatid(db *sql.DB, m *ChatModel, chatid string) (int, error) {
	_, err := db.Exec("UPDATE chats SET (chatid, name, theme, last_updated, creation_time) = ROW($1, $2, $3, $4, $5) WHERE chatid = $6;", m.Chatid, m.Name, m.Theme, m.LastUpdated, m.CreationTime, chatid)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func chatModelDelEqChatid(db *sql.DB, chatid string) error {
	_, err := db.Exec("DELETE FROM chats WHERE chatid = $1;", chatid)
	return err
}
