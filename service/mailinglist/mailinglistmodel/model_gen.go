// Code generated by go generate forge model v0.4.3; DO NOT EDIT.

package mailinglistmodel

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"xorkevin.dev/forge/model/sqldb"
)

type (
	listModelTable struct {
		TableName string
	}
)

func (t *listModelTable) Setup(ctx context.Context, d sqldb.Executor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (listid VARCHAR(255) PRIMARY KEY, creatorid VARCHAR(31) NOT NULL, listname VARCHAR(127) NOT NULL, name VARCHAR(255) NOT NULL, description VARCHAR(255), archive BOOLEAN NOT NULL, sender_policy VARCHAR(255) NOT NULL, member_policy VARCHAR(255) NOT NULL, last_updated BIGINT NOT NULL, creation_time BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_creatorid__last_updated_index ON "+t.TableName+" (creatorid, last_updated);")
	if err != nil {
		return err
	}
	return nil
}

func (t *listModelTable) Insert(ctx context.Context, d sqldb.Executor, m *ListModel) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, creatorid, listname, name, description, archive, sender_policy, member_policy, last_updated, creation_time) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);", m.ListID, m.CreatorID, m.Listname, m.Name, m.Description, m.Archive, m.SenderPolicy, m.MemberPolicy, m.LastUpdated, m.CreationTime)
	if err != nil {
		return err
	}
	return nil
}

func (t *listModelTable) InsertBulk(ctx context.Context, d sqldb.Executor, models []*ListModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*10)
	for c, m := range models {
		n := c * 10
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5, n+6, n+7, n+8, n+9, n+10))
		args = append(args, m.ListID, m.CreatorID, m.Listname, m.Name, m.Description, m.Archive, m.SenderPolicy, m.MemberPolicy, m.LastUpdated, m.CreationTime)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, creatorid, listname, name, description, archive, sender_policy, member_policy, last_updated, creation_time) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *listModelTable) GetListModelEqListID(ctx context.Context, d sqldb.Executor, listid string) (*ListModel, error) {
	m := &ListModel{}
	if err := d.QueryRowContext(ctx, "SELECT listid, creatorid, listname, name, description, archive, sender_policy, member_policy, last_updated, creation_time FROM "+t.TableName+" WHERE listid = $1;", listid).Scan(&m.ListID, &m.CreatorID, &m.Listname, &m.Name, &m.Description, &m.Archive, &m.SenderPolicy, &m.MemberPolicy, &m.LastUpdated, &m.CreationTime); err != nil {
		return nil, err
	}
	return m, nil
}

func (t *listModelTable) GetListModelHasListIDOrdListID(ctx context.Context, d sqldb.Executor, listids []string, orderasc bool, limit, offset int) (_ []ListModel, retErr error) {
	paramCount := 2
	args := make([]interface{}, 0, paramCount+len(listids))
	args = append(args, limit, offset)
	var placeholderslistids string
	{
		placeholders := make([]string, 0, len(listids))
		for _, i := range listids {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholderslistids = strings.Join(placeholders, ", ")
	}
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]ListModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, creatorid, listname, name, description, archive, sender_policy, member_policy, last_updated, creation_time FROM "+t.TableName+" WHERE listid IN (VALUES "+placeholderslistids+") ORDER BY listid "+order+" LIMIT $1 OFFSET $2;", args...)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m ListModel
		if err := rows.Scan(&m.ListID, &m.CreatorID, &m.Listname, &m.Name, &m.Description, &m.Archive, &m.SenderPolicy, &m.MemberPolicy, &m.LastUpdated, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *listModelTable) DelEqListID(ctx context.Context, d sqldb.Executor, listid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE listid = $1;", listid)
	return err
}

func (t *listModelTable) DelEqCreatorID(ctx context.Context, d sqldb.Executor, creatorid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE creatorid = $1;", creatorid)
	return err
}

func (t *listModelTable) GetListModelEqCreatorIDOrdLastUpdated(ctx context.Context, d sqldb.Executor, creatorid string, orderasc bool, limit, offset int) (_ []ListModel, retErr error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]ListModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, creatorid, listname, name, description, archive, sender_policy, member_policy, last_updated, creation_time FROM "+t.TableName+" WHERE creatorid = $3 ORDER BY last_updated "+order+" LIMIT $1 OFFSET $2;", limit, offset, creatorid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m ListModel
		if err := rows.Scan(&m.ListID, &m.CreatorID, &m.Listname, &m.Name, &m.Description, &m.Archive, &m.SenderPolicy, &m.MemberPolicy, &m.LastUpdated, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *listModelTable) UpdlistPropsEqListID(ctx context.Context, d sqldb.Executor, m *listProps, listid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (name, description, archive, sender_policy, member_policy) = ROW($1, $2, $3, $4, $5) WHERE listid = $6;", m.Name, m.Description, m.Archive, m.SenderPolicy, m.MemberPolicy, listid)
	if err != nil {
		return err
	}
	return nil
}

func (t *listModelTable) UpdlistLastUpdatedEqListID(ctx context.Context, d sqldb.Executor, m *listLastUpdated, listid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (last_updated) = ROW($1) WHERE listid = $2;", m.LastUpdated, listid)
	if err != nil {
		return err
	}
	return nil
}

type (
	memberModelTable struct {
		TableName string
	}
)

func (t *memberModelTable) Setup(ctx context.Context, d sqldb.Executor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (listid VARCHAR(255), userid VARCHAR(31), PRIMARY KEY (listid, userid), last_updated BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_userid__last_updated_index ON "+t.TableName+" (userid, last_updated);")
	if err != nil {
		return err
	}
	return nil
}

func (t *memberModelTable) Insert(ctx context.Context, d sqldb.Executor, m *MemberModel) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, userid, last_updated) VALUES ($1, $2, $3);", m.ListID, m.Userid, m.LastUpdated)
	if err != nil {
		return err
	}
	return nil
}

func (t *memberModelTable) InsertBulk(ctx context.Context, d sqldb.Executor, models []*MemberModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*3)
	for c, m := range models {
		n := c * 3
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d)", n+1, n+2, n+3))
		args = append(args, m.ListID, m.Userid, m.LastUpdated)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, userid, last_updated) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *memberModelTable) DelEqListID(ctx context.Context, d sqldb.Executor, listid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE listid = $1;", listid)
	return err
}

func (t *memberModelTable) GetMemberModelHasListIDOrdListID(ctx context.Context, d sqldb.Executor, listids []string, orderasc bool, limit, offset int) (_ []MemberModel, retErr error) {
	paramCount := 2
	args := make([]interface{}, 0, paramCount+len(listids))
	args = append(args, limit, offset)
	var placeholderslistids string
	{
		placeholders := make([]string, 0, len(listids))
		for _, i := range listids {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholderslistids = strings.Join(placeholders, ", ")
	}
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MemberModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, userid, last_updated FROM "+t.TableName+" WHERE listid IN (VALUES "+placeholderslistids+") ORDER BY listid "+order+" LIMIT $1 OFFSET $2;", args...)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m MemberModel
		if err := rows.Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *memberModelTable) GetMemberModelEqListIDEqUserid(ctx context.Context, d sqldb.Executor, listid string, userid string) (*MemberModel, error) {
	m := &MemberModel{}
	if err := d.QueryRowContext(ctx, "SELECT listid, userid, last_updated FROM "+t.TableName+" WHERE listid = $1 AND userid = $2;", listid, userid).Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
		return nil, err
	}
	return m, nil
}

func (t *memberModelTable) GetMemberModelEqListIDOrdUserid(ctx context.Context, d sqldb.Executor, listid string, orderasc bool, limit, offset int) (_ []MemberModel, retErr error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MemberModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, userid, last_updated FROM "+t.TableName+" WHERE listid = $3 ORDER BY userid "+order+" LIMIT $1 OFFSET $2;", limit, offset, listid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m MemberModel
		if err := rows.Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *memberModelTable) GetMemberModelEqListIDHasUseridOrdUserid(ctx context.Context, d sqldb.Executor, listid string, userids []string, orderasc bool, limit, offset int) (_ []MemberModel, retErr error) {
	paramCount := 3
	args := make([]interface{}, 0, paramCount+len(userids))
	args = append(args, limit, offset, listid)
	var placeholdersuserids string
	{
		placeholders := make([]string, 0, len(userids))
		for _, i := range userids {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersuserids = strings.Join(placeholders, ", ")
	}
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MemberModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, userid, last_updated FROM "+t.TableName+" WHERE listid = $3 AND userid IN (VALUES "+placeholdersuserids+") ORDER BY userid "+order+" LIMIT $1 OFFSET $2;", args...)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m MemberModel
		if err := rows.Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *memberModelTable) DelEqListIDHasUserid(ctx context.Context, d sqldb.Executor, listid string, userids []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(userids))
	args = append(args, listid)
	var placeholdersuserids string
	{
		placeholders := make([]string, 0, len(userids))
		for _, i := range userids {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersuserids = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE listid = $1 AND userid IN (VALUES "+placeholdersuserids+");", args...)
	return err
}

func (t *memberModelTable) DelEqUserid(ctx context.Context, d sqldb.Executor, userid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE userid = $1;", userid)
	return err
}

func (t *memberModelTable) GetMemberModelEqUseridOrdLastUpdated(ctx context.Context, d sqldb.Executor, userid string, orderasc bool, limit, offset int) (_ []MemberModel, retErr error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MemberModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, userid, last_updated FROM "+t.TableName+" WHERE userid = $3 ORDER BY last_updated "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m MemberModel
		if err := rows.Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *memberModelTable) UpdlistLastUpdatedEqListID(ctx context.Context, d sqldb.Executor, m *listLastUpdated, listid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (last_updated) = ROW($1) WHERE listid = $2;", m.LastUpdated, listid)
	if err != nil {
		return err
	}
	return nil
}

type (
	msgModelTable struct {
		TableName string
	}
)

func (t *msgModelTable) Setup(ctx context.Context, d sqldb.Executor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (listid VARCHAR(255), msgid VARCHAR(1023), PRIMARY KEY (listid, msgid), userid VARCHAR(31) NOT NULL, creation_time BIGINT NOT NULL, spf_pass VARCHAR(255) NOT NULL, dkim_pass VARCHAR(255) NOT NULL, subject VARCHAR(255) NOT NULL, in_reply_to VARCHAR(1023) NOT NULL, parent_id VARCHAR(1023) NOT NULL, thread_id VARCHAR(1023) NOT NULL, processed BOOL NOT NULL, sent BOOL NOT NULL, deleted BOOL NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_listid__creation_time_index ON "+t.TableName+" (listid, creation_time);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_listid__thread_id__creation_time_index ON "+t.TableName+" (listid, thread_id, creation_time);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_listid__in_reply_to_index ON "+t.TableName+" (listid, in_reply_to);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_listid__thread_id__in_reply_to_index ON "+t.TableName+" (listid, thread_id, in_reply_to);")
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) Insert(ctx context.Context, d sqldb.Executor, m *MsgModel) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, msgid, userid, creation_time, spf_pass, dkim_pass, subject, in_reply_to, parent_id, thread_id, processed, sent, deleted) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);", m.ListID, m.Msgid, m.Userid, m.CreationTime, m.SPFPass, m.DKIMPass, m.Subject, m.InReplyTo, m.ParentID, m.ThreadID, m.Processed, m.Sent, m.Deleted)
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) InsertBulk(ctx context.Context, d sqldb.Executor, models []*MsgModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*13)
	for c, m := range models {
		n := c * 13
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5, n+6, n+7, n+8, n+9, n+10, n+11, n+12, n+13))
		args = append(args, m.ListID, m.Msgid, m.Userid, m.CreationTime, m.SPFPass, m.DKIMPass, m.Subject, m.InReplyTo, m.ParentID, m.ThreadID, m.Processed, m.Sent, m.Deleted)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, msgid, userid, creation_time, spf_pass, dkim_pass, subject, in_reply_to, parent_id, thread_id, processed, sent, deleted) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) GetMsgModelEqListIDEqMsgid(ctx context.Context, d sqldb.Executor, listid string, msgid string) (*MsgModel, error) {
	m := &MsgModel{}
	if err := d.QueryRowContext(ctx, "SELECT listid, msgid, userid, creation_time, spf_pass, dkim_pass, subject, in_reply_to, parent_id, thread_id, processed, sent, deleted FROM "+t.TableName+" WHERE listid = $1 AND msgid = $2;", listid, msgid).Scan(&m.ListID, &m.Msgid, &m.Userid, &m.CreationTime, &m.SPFPass, &m.DKIMPass, &m.Subject, &m.InReplyTo, &m.ParentID, &m.ThreadID, &m.Processed, &m.Sent, &m.Deleted); err != nil {
		return nil, err
	}
	return m, nil
}

func (t *msgModelTable) GetMsgModelEqListIDOrdCreationTime(ctx context.Context, d sqldb.Executor, listid string, orderasc bool, limit, offset int) (_ []MsgModel, retErr error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MsgModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, msgid, userid, creation_time, spf_pass, dkim_pass, subject, in_reply_to, parent_id, thread_id, processed, sent, deleted FROM "+t.TableName+" WHERE listid = $3 ORDER BY creation_time "+order+" LIMIT $1 OFFSET $2;", limit, offset, listid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m MsgModel
		if err := rows.Scan(&m.ListID, &m.Msgid, &m.Userid, &m.CreationTime, &m.SPFPass, &m.DKIMPass, &m.Subject, &m.InReplyTo, &m.ParentID, &m.ThreadID, &m.Processed, &m.Sent, &m.Deleted); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *msgModelTable) GetMsgModelEqListIDEqThreadIDOrdCreationTime(ctx context.Context, d sqldb.Executor, listid string, threadid string, orderasc bool, limit, offset int) (_ []MsgModel, retErr error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MsgModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, msgid, userid, creation_time, spf_pass, dkim_pass, subject, in_reply_to, parent_id, thread_id, processed, sent, deleted FROM "+t.TableName+" WHERE listid = $3 AND thread_id = $4 ORDER BY creation_time "+order+" LIMIT $1 OFFSET $2;", limit, offset, listid, threadid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m MsgModel
		if err := rows.Scan(&m.ListID, &m.Msgid, &m.Userid, &m.CreationTime, &m.SPFPass, &m.DKIMPass, &m.Subject, &m.InReplyTo, &m.ParentID, &m.ThreadID, &m.Processed, &m.Sent, &m.Deleted); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *msgModelTable) UpdmsgProcessedEqListIDEqMsgid(ctx context.Context, d sqldb.Executor, m *msgProcessed, listid string, msgid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (processed) = ROW($1) WHERE listid = $2 AND msgid = $3;", m.Processed, listid, msgid)
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) UpdmsgSentEqListIDEqMsgid(ctx context.Context, d sqldb.Executor, m *msgSent, listid string, msgid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (sent) = ROW($1) WHERE listid = $2 AND msgid = $3;", m.Sent, listid, msgid)
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) UpdmsgDeletedEqListIDHasMsgid(ctx context.Context, d sqldb.Executor, m *msgDeleted, listid string, msgids []string) error {
	paramCount := 6
	args := make([]interface{}, 0, paramCount+len(msgids))
	args = append(args, m.Userid, m.SPFPass, m.DKIMPass, m.Subject, m.Deleted, listid)
	var placeholdersmsgids string
	{
		placeholders := make([]string, 0, len(msgids))
		for _, i := range msgids {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersmsgids = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (userid, spf_pass, dkim_pass, subject, deleted) = ROW($1, $2, $3, $4, $5) WHERE listid = $6 AND msgid IN (VALUES "+placeholdersmsgids+");", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) UpdmsgParentEqListIDEqMsgidEqThreadID(ctx context.Context, d sqldb.Executor, m *msgParent, listid string, msgid string, threadid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (parent_id, thread_id) = ROW($1, $2) WHERE listid = $3 AND msgid = $4 AND thread_id = $5;", m.ParentID, m.ThreadID, listid, msgid, threadid)
	if err != nil {
		return err
	}
	return nil
}

func (t *msgModelTable) UpdmsgChildrenEqListIDEqThreadIDEqInReplyTo(ctx context.Context, d sqldb.Executor, m *msgChildren, listid string, threadid string, inreplyto string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (parent_id, thread_id) = ROW($1, $2) WHERE listid = $3 AND thread_id = $4 AND in_reply_to = $5;", m.ParentID, m.ThreadID, listid, threadid, inreplyto)
	if err != nil {
		return err
	}
	return nil
}

type (
	sentmsgModelTable struct {
		TableName string
	}
)

func (t *sentmsgModelTable) Setup(ctx context.Context, d sqldb.Executor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (listid VARCHAR(255), msgid VARCHAR(1023), userid VARCHAR(31), PRIMARY KEY (listid, msgid, userid), sent_time BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_listid__userid__msgid_index ON "+t.TableName+" (listid, userid, msgid);")
	if err != nil {
		return err
	}
	return nil
}

func (t *sentmsgModelTable) Insert(ctx context.Context, d sqldb.Executor, m *SentMsgModel) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, msgid, userid, sent_time) VALUES ($1, $2, $3, $4);", m.ListID, m.Msgid, m.Userid, m.SentTime)
	if err != nil {
		return err
	}
	return nil
}

func (t *sentmsgModelTable) InsertBulk(ctx context.Context, d sqldb.Executor, models []*SentMsgModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*4)
	for c, m := range models {
		n := c * 4
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4))
		args = append(args, m.ListID, m.Msgid, m.Userid, m.SentTime)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, msgid, userid, sent_time) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *sentmsgModelTable) DelEqListIDHasMsgid(ctx context.Context, d sqldb.Executor, listid string, msgids []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(msgids))
	args = append(args, listid)
	var placeholdersmsgids string
	{
		placeholders := make([]string, 0, len(msgids))
		for _, i := range msgids {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersmsgids = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE listid = $1 AND msgid IN (VALUES "+placeholdersmsgids+");", args...)
	return err
}

type (
	treeModelTable struct {
		TableName string
	}
)

func (t *treeModelTable) Setup(ctx context.Context, d sqldb.Executor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (listid VARCHAR(255), msgid VARCHAR(1023), parent_id VARCHAR(1023), PRIMARY KEY (listid, msgid, parent_id), depth INT NOT NULL, creation_time BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_listid__msgid__depth_index ON "+t.TableName+" (listid, msgid, depth);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_listid__parent_id__depth__creation_time_index ON "+t.TableName+" (listid, parent_id, depth, creation_time);")
	if err != nil {
		return err
	}
	return nil
}

func (t *treeModelTable) Insert(ctx context.Context, d sqldb.Executor, m *TreeModel) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, msgid, parent_id, depth, creation_time) VALUES ($1, $2, $3, $4, $5);", m.ListID, m.Msgid, m.ParentID, m.Depth, m.CreationTime)
	if err != nil {
		return err
	}
	return nil
}

func (t *treeModelTable) InsertBulk(ctx context.Context, d sqldb.Executor, models []*TreeModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*5)
	for c, m := range models {
		n := c * 5
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5))
		args = append(args, m.ListID, m.Msgid, m.ParentID, m.Depth, m.CreationTime)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (listid, msgid, parent_id, depth, creation_time) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *treeModelTable) DelEqListID(ctx context.Context, d sqldb.Executor, listid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE listid = $1;", listid)
	return err
}

func (t *treeModelTable) GetTreeModelEqListIDEqMsgidEqParentID(ctx context.Context, d sqldb.Executor, listid string, msgid string, parentid string) (*TreeModel, error) {
	m := &TreeModel{}
	if err := d.QueryRowContext(ctx, "SELECT listid, msgid, parent_id, depth, creation_time FROM "+t.TableName+" WHERE listid = $1 AND msgid = $2 AND parent_id = $3;", listid, msgid, parentid).Scan(&m.ListID, &m.Msgid, &m.ParentID, &m.Depth, &m.CreationTime); err != nil {
		return nil, err
	}
	return m, nil
}

func (t *treeModelTable) GetTreeModelEqListIDEqMsgidOrdDepth(ctx context.Context, d sqldb.Executor, listid string, msgid string, orderasc bool, limit, offset int) (_ []TreeModel, retErr error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]TreeModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, msgid, parent_id, depth, creation_time FROM "+t.TableName+" WHERE listid = $3 AND msgid = $4 ORDER BY depth "+order+" LIMIT $1 OFFSET $2;", limit, offset, listid, msgid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m TreeModel
		if err := rows.Scan(&m.ListID, &m.Msgid, &m.ParentID, &m.Depth, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *treeModelTable) GetTreeModelEqListIDEqParentIDEqDepthOrdCreationTime(ctx context.Context, d sqldb.Executor, listid string, parentid string, depth int, orderasc bool, limit, offset int) (_ []TreeModel, retErr error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]TreeModel, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT listid, msgid, parent_id, depth, creation_time FROM "+t.TableName+" WHERE listid = $3 AND parent_id = $4 AND depth = $5 ORDER BY creation_time "+order+" LIMIT $1 OFFSET $2;", limit, offset, listid, parentid, depth)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m TreeModel
		if err := rows.Scan(&m.ListID, &m.Msgid, &m.ParentID, &m.Depth, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}
