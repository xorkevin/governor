// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"database/sql"
	"fmt"
	"strings"
)

func memberModelSetup(db *sql.DB, tableName string) error {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS " + tableName + " (listid VARCHAR(255), userid VARCHAR(31), PRIMARY KEY (listid, userid), last_updated BIGINT NOT NULL);")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS " + tableName + "_userid__last_updated_index ON " + tableName + " (userid, last_updated);")
	if err != nil {
		return err
	}
	return nil
}

func memberModelInsert(db *sql.DB, tableName string, m *MemberModel) error {
	_, err := db.Exec("INSERT INTO "+tableName+" (listid, userid, last_updated) VALUES ($1, $2, $3);", m.ListID, m.Userid, m.LastUpdated)
	if err != nil {
		return err
	}
	return nil
}

func memberModelInsertBulk(db *sql.DB, tableName string, models []*MemberModel, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*3)
	for c, m := range models {
		n := c * 3
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d)", n+1, n+2, n+3))
		args = append(args, m.ListID, m.Userid, m.LastUpdated)
	}
	_, err := db.Exec("INSERT INTO "+tableName+" (listid, userid, last_updated) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func memberModelDelEqListID(db *sql.DB, tableName string, listid string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE listid = $1;", listid)
	return err
}

func memberModelGetMemberModelHasListIDOrdListID(db *sql.DB, tableName string, listid []string, orderasc bool, limit, offset int) ([]MemberModel, error) {
	paramCount := 2
	args := make([]interface{}, 0, paramCount+len(listid))
	args = append(args, limit, offset)
	var placeholderslistid string
	{
		placeholders := make([]string, 0, len(listid))
		for _, i := range listid {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholderslistid = strings.Join(placeholders, ", ")
	}
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MemberModel, 0, limit)
	rows, err := db.Query("SELECT listid, userid, last_updated FROM "+tableName+" WHERE listid IN (VALUES "+placeholderslistid+") ORDER BY listid "+order+" LIMIT $1 OFFSET $2;", args...)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := MemberModel{}
		if err := rows.Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func memberModelGetMemberModelEqListIDEqUserid(db *sql.DB, tableName string, listid string, userid string) (*MemberModel, error) {
	m := &MemberModel{}
	if err := db.QueryRow("SELECT listid, userid, last_updated FROM "+tableName+" WHERE listid = $1 AND userid = $2;", listid, userid).Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
		return nil, err
	}
	return m, nil
}

func memberModelGetMemberModelEqListIDOrdUserid(db *sql.DB, tableName string, listid string, orderasc bool, limit, offset int) ([]MemberModel, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MemberModel, 0, limit)
	rows, err := db.Query("SELECT listid, userid, last_updated FROM "+tableName+" WHERE listid = $3 ORDER BY userid "+order+" LIMIT $1 OFFSET $2;", limit, offset, listid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := MemberModel{}
		if err := rows.Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func memberModelGetMemberModelEqListIDHasUseridOrdUserid(db *sql.DB, tableName string, listid string, userid []string, orderasc bool, limit, offset int) ([]MemberModel, error) {
	paramCount := 3
	args := make([]interface{}, 0, paramCount+len(userid))
	args = append(args, limit, offset, listid)
	var placeholdersuserid string
	{
		placeholders := make([]string, 0, len(userid))
		for _, i := range userid {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersuserid = strings.Join(placeholders, ", ")
	}
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MemberModel, 0, limit)
	rows, err := db.Query("SELECT listid, userid, last_updated FROM "+tableName+" WHERE listid = $3 AND userid IN (VALUES "+placeholdersuserid+") ORDER BY userid "+order+" LIMIT $1 OFFSET $2;", args...)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := MemberModel{}
		if err := rows.Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func memberModelDelEqListIDHasUserid(db *sql.DB, tableName string, listid string, userid []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(userid))
	args = append(args, listid)
	var placeholdersuserid string
	{
		placeholders := make([]string, 0, len(userid))
		for _, i := range userid {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersuserid = strings.Join(placeholders, ", ")
	}
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE listid = $1 AND userid IN (VALUES "+placeholdersuserid+");", args...)
	return err
}

func memberModelDelEqUserid(db *sql.DB, tableName string, userid string) error {
	_, err := db.Exec("DELETE FROM "+tableName+" WHERE userid = $1;", userid)
	return err
}

func memberModelGetMemberModelEqUseridOrdLastUpdated(db *sql.DB, tableName string, userid string, orderasc bool, limit, offset int) ([]MemberModel, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]MemberModel, 0, limit)
	rows, err := db.Query("SELECT listid, userid, last_updated FROM "+tableName+" WHERE userid = $3 ORDER BY last_updated "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := MemberModel{}
		if err := rows.Scan(&m.ListID, &m.Userid, &m.LastUpdated); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func memberModelUpdlistLastUpdatedEqListID(db *sql.DB, tableName string, m *listLastUpdated, listid string) error {
	_, err := db.Exec("UPDATE "+tableName+" SET (last_updated) = ROW($1) WHERE listid = $2;", m.LastUpdated, listid)
	if err != nil {
		return err
	}
	return nil
}
