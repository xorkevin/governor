// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"database/sql"
	"fmt"
	"strings"

	"github.com/lib/pq"
)

const (
	connectionModelTableName = "oauthconnections"
)

func connectionModelSetup(db *sql.DB) (int, error) {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS oauthconnections (userid VARCHAR(31), clientid VARCHAR(31), PRIMARY KEY (userid, clientid), scope VARCHAR(4095) NOT NULL, nonce VARCHAR(255), challenge VARCHAR(128), challenge_method VARCHAR(31), codehash VARCHAR(255) NOT NULL, auth_time BIGINT NOT NULL, code_time BIGINT NOT NULL, access_time BIGINT NOT NULL, creation_time BIGINT NOT NULL, keyhash VARCHAR(255) NOT NULL);")
	if err != nil {
		return 0, err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS oauthconnections_clientid_index ON oauthconnections (clientid);")
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "42501": // insufficient_privilege
				return 5, err
			default:
				return 0, err
			}
		}
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS oauthconnections_userid__access_time_index ON oauthconnections (userid, access_time);")
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "42501": // insufficient_privilege
				return 5, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func connectionModelInsert(db *sql.DB, m *Model) (int, error) {
	_, err := db.Exec("INSERT INTO oauthconnections (userid, clientid, scope, nonce, challenge, challenge_method, codehash, auth_time, code_time, access_time, creation_time, keyhash) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);", m.Userid, m.ClientID, m.Scope, m.Nonce, m.Challenge, m.ChallengeMethod, m.CodeHash, m.AuthTime, m.CodeTime, m.AccessTime, m.CreationTime, m.KeyHash)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func connectionModelInsertBulk(db *sql.DB, models []*Model, allowConflict bool) (int, error) {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*12)
	for c, m := range models {
		n := c * 12
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5, n+6, n+7, n+8, n+9, n+10, n+11, n+12))
		args = append(args, m.Userid, m.ClientID, m.Scope, m.Nonce, m.Challenge, m.ChallengeMethod, m.CodeHash, m.AuthTime, m.CodeTime, m.AccessTime, m.CreationTime, m.KeyHash)
	}
	_, err := db.Exec("INSERT INTO oauthconnections (userid, clientid, scope, nonce, challenge, challenge_method, codehash, auth_time, code_time, access_time, creation_time, keyhash) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func connectionModelDelEqUserid(db *sql.DB, userid string) error {
	_, err := db.Exec("DELETE FROM oauthconnections WHERE userid = $1;", userid)
	return err
}

func connectionModelGetModelEqUseridEqClientID(db *sql.DB, userid string, clientid string) (*Model, int, error) {
	m := &Model{}
	if err := db.QueryRow("SELECT userid, clientid, scope, nonce, challenge, challenge_method, codehash, auth_time, code_time, access_time, creation_time, keyhash FROM oauthconnections WHERE userid = $1 AND clientid = $2;", userid, clientid).Scan(&m.Userid, &m.ClientID, &m.Scope, &m.Nonce, &m.Challenge, &m.ChallengeMethod, &m.CodeHash, &m.AuthTime, &m.CodeTime, &m.AccessTime, &m.CreationTime, &m.KeyHash); err != nil {
		if err == sql.ErrNoRows {
			return nil, 2, err
		}
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "42P01": // undefined_table
				return nil, 4, err
			default:
				return nil, 0, err
			}
		}
		return nil, 0, err
	}
	return m, 0, nil
}

func connectionModelUpdModelEqUseridEqClientID(db *sql.DB, m *Model, userid string, clientid string) (int, error) {
	_, err := db.Exec("UPDATE oauthconnections SET (userid, clientid, scope, nonce, challenge, challenge_method, codehash, auth_time, code_time, access_time, creation_time, keyhash) = ROW($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) WHERE userid = $13 AND clientid = $14;", m.Userid, m.ClientID, m.Scope, m.Nonce, m.Challenge, m.ChallengeMethod, m.CodeHash, m.AuthTime, m.CodeTime, m.AccessTime, m.CreationTime, m.KeyHash, userid, clientid)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func connectionModelDelEqUseridHasClientID(db *sql.DB, userid string, clientid []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(clientid))
	args = append(args, userid)
	var placeholdersclientid string
	{
		placeholders := make([]string, 0, len(clientid))
		for _, i := range clientid {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersclientid = strings.Join(placeholders, ", ")
	}
	_, err := db.Exec("DELETE FROM oauthconnections WHERE userid = $1 AND clientid IN (VALUES "+placeholdersclientid+");", args...)
	return err
}

func connectionModelGetModelEqUseridOrdAccessTime(db *sql.DB, userid string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid, clientid, scope, nonce, challenge, challenge_method, codehash, auth_time, code_time, access_time, creation_time, keyhash FROM oauthconnections WHERE userid = $3 ORDER BY access_time "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid, &m.ClientID, &m.Scope, &m.Nonce, &m.Challenge, &m.ChallengeMethod, &m.CodeHash, &m.AuthTime, &m.CodeTime, &m.AccessTime, &m.CreationTime, &m.KeyHash); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}
