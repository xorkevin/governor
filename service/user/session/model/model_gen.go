// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"strings"

	"xorkevin.dev/governor/service/db"
)

type (
	sessionModelTable struct {
		TableName string
	}
)

func (t *sessionModelTable) Setup(ctx context.Context, d db.SQLExecutor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (sessionid VARCHAR(63) PRIMARY KEY, userid VARCHAR(31) NOT NULL, keyhash VARCHAR(127) NOT NULL, time BIGINT NOT NULL, auth_time BIGINT NOT NULL, ipaddr VARCHAR(63), user_agent VARCHAR(1023));")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_userid__sessionid_index ON "+t.TableName+" (userid, sessionid);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_userid__time_index ON "+t.TableName+" (userid, time);")
	if err != nil {
		return err
	}
	return nil
}

func (t *sessionModelTable) Insert(ctx context.Context, d db.SQLExecutor, m *Model) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (sessionid, userid, keyhash, time, auth_time, ipaddr, user_agent) VALUES ($1, $2, $3, $4, $5, $6, $7);", m.SessionID, m.Userid, m.KeyHash, m.Time, m.AuthTime, m.IPAddr, m.UserAgent)
	if err != nil {
		return err
	}
	return nil
}

func (t *sessionModelTable) InsertBulk(ctx context.Context, d db.SQLExecutor, models []*Model, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*7)
	for c, m := range models {
		n := c * 7
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5, n+6, n+7))
		args = append(args, m.SessionID, m.Userid, m.KeyHash, m.Time, m.AuthTime, m.IPAddr, m.UserAgent)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (sessionid, userid, keyhash, time, auth_time, ipaddr, user_agent) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *sessionModelTable) GetModelEqSessionID(ctx context.Context, d db.SQLExecutor, sessionid string) (*Model, error) {
	m := &Model{}
	if err := d.QueryRowContext(ctx, "SELECT sessionid, userid, keyhash, time, auth_time, ipaddr, user_agent FROM "+t.TableName+" WHERE sessionid = $1;", sessionid).Scan(&m.SessionID, &m.Userid, &m.KeyHash, &m.Time, &m.AuthTime, &m.IPAddr, &m.UserAgent); err != nil {
		return nil, err
	}
	return m, nil
}

func (t *sessionModelTable) UpdModelEqSessionID(ctx context.Context, d db.SQLExecutor, m *Model, sessionid string) error {
	_, err := d.ExecContext(ctx, "UPDATE "+t.TableName+" SET (sessionid, userid, keyhash, time, auth_time, ipaddr, user_agent) = ROW($1, $2, $3, $4, $5, $6, $7) WHERE sessionid = $8;", m.SessionID, m.Userid, m.KeyHash, m.Time, m.AuthTime, m.IPAddr, m.UserAgent, sessionid)
	if err != nil {
		return err
	}
	return nil
}

func (t *sessionModelTable) DelEqSessionID(ctx context.Context, d db.SQLExecutor, sessionid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE sessionid = $1;", sessionid)
	return err
}

func (t *sessionModelTable) DelHasSessionID(ctx context.Context, d db.SQLExecutor, sessionids []string) error {
	paramCount := 0
	args := make([]interface{}, 0, paramCount+len(sessionids))
	var placeholderssessionids string
	{
		placeholders := make([]string, 0, len(sessionids))
		for _, i := range sessionids {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholderssessionids = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE sessionid IN (VALUES "+placeholderssessionids+");", args...)
	return err
}

func (t *sessionModelTable) DelEqUserid(ctx context.Context, d db.SQLExecutor, userid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE userid = $1;", userid)
	return err
}

func (t *sessionModelTable) GetModelEqUseridOrdTime(ctx context.Context, d db.SQLExecutor, userid string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT sessionid, userid, keyhash, time, auth_time, ipaddr, user_agent FROM "+t.TableName+" WHERE userid = $3 ORDER BY time "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.SessionID, &m.Userid, &m.KeyHash, &m.Time, &m.AuthTime, &m.IPAddr, &m.UserAgent); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *sessionModelTable) GetqIDEqUseridOrdSessionID(ctx context.Context, d db.SQLExecutor, userid string, orderasc bool, limit, offset int) ([]qID, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]qID, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT sessionid FROM "+t.TableName+" WHERE userid = $3 ORDER BY sessionid "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		var m qID
		if err := rows.Scan(&m.SessionID); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}
