// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"database/sql"
	"fmt"
	"strings"
)

const (
	roleModelTableName = "userroles"
)

func roleModelSetup(db *sql.DB) error {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS userroles (userid VARCHAR(31), role VARCHAR(255), PRIMARY KEY (userid, role));")
	if err != nil {
		return err
	}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS userroles_role__userid_index ON userroles (role, userid);")
	if err != nil {
		return err
	}
	return nil
}

func roleModelInsert(db *sql.DB, m *Model) error {
	_, err := db.Exec("INSERT INTO userroles (userid, role) VALUES ($1, $2);", m.Userid, m.Role)
	if err != nil {
		return err
	}
	return nil
}

func roleModelInsertBulk(db *sql.DB, models []*Model, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*2)
	for c, m := range models {
		n := c * 2
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d)", n+1, n+2))
		args = append(args, m.Userid, m.Role)
	}
	_, err := db.Exec("INSERT INTO userroles (userid, role) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func roleModelGetModelEqRoleOrdUserid(db *sql.DB, role string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid, role FROM userroles WHERE role = $3 ORDER BY userid "+order+" LIMIT $1 OFFSET $2;", limit, offset, role)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid, &m.Role); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func roleModelDelEqUserid(db *sql.DB, userid string) error {
	_, err := db.Exec("DELETE FROM userroles WHERE userid = $1;", userid)
	return err
}

func roleModelGetModelEqUseridEqRole(db *sql.DB, userid string, role string) (*Model, error) {
	m := &Model{}
	if err := db.QueryRow("SELECT userid, role FROM userroles WHERE userid = $1 AND role = $2;", userid, role).Scan(&m.Userid, &m.Role); err != nil {
		return nil, err
	}
	return m, nil
}

func roleModelGetModelEqUseridOrdRole(db *sql.DB, userid string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid, role FROM userroles WHERE userid = $3 ORDER BY role "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid, &m.Role); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func roleModelGetModelEqUseridHasRoleOrdRole(db *sql.DB, userid string, role []string, orderasc bool, limit, offset int) ([]Model, error) {
	paramCount := 3
	args := make([]interface{}, 0, paramCount+len(role))
	args = append(args, limit, offset, userid)
	var placeholdersrole string
	{
		placeholders := make([]string, 0, len(role))
		for _, i := range role {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersrole = strings.Join(placeholders, ", ")
	}
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid, role FROM userroles WHERE userid = $3 AND role IN (VALUES "+placeholdersrole+") ORDER BY role "+order+" LIMIT $1 OFFSET $2;", args...)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid, &m.Role); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func roleModelGetModelEqUseridLikeRoleOrdRole(db *sql.DB, userid string, role string, orderasc bool, limit, offset int) ([]Model, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]Model, 0, limit)
	rows, err := db.Query("SELECT userid, role FROM userroles WHERE userid = $3 AND role LIKE $4 ORDER BY role "+order+" LIMIT $1 OFFSET $2;", limit, offset, userid, role)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := Model{}
		if err := rows.Scan(&m.Userid, &m.Role); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func roleModelDelEqRoleHasUserid(db *sql.DB, role string, userid []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(userid))
	args = append(args, role)
	var placeholdersuserid string
	{
		placeholders := make([]string, 0, len(userid))
		for _, i := range userid {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersuserid = strings.Join(placeholders, ", ")
	}
	_, err := db.Exec("DELETE FROM userroles WHERE role = $1 AND userid IN (VALUES "+placeholdersuserid+");", args...)
	return err
}

func roleModelDelEqUseridEqRole(db *sql.DB, userid string, role string) error {
	_, err := db.Exec("DELETE FROM userroles WHERE userid = $1 AND role = $2;", userid, role)
	return err
}

func roleModelDelEqUseridHasRole(db *sql.DB, userid string, role []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(role))
	args = append(args, userid)
	var placeholdersrole string
	{
		placeholders := make([]string, 0, len(role))
		for _, i := range role {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersrole = strings.Join(placeholders, ", ")
	}
	_, err := db.Exec("DELETE FROM userroles WHERE userid = $1 AND role IN (VALUES "+placeholdersrole+");", args...)
	return err
}
