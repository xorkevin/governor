// Code generated by go generate forge model v0.5.1; DO NOT EDIT.

package rolemodel

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"xorkevin.dev/forge/model/sqldb"
)

type (
	roleModelTable struct {
		TableName string
	}
)

func (t *roleModelTable) Setup(ctx context.Context, d sqldb.Executor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (userid VARCHAR(31), role VARCHAR(255), PRIMARY KEY (userid, role), UNIQUE (role, userid));")
	if err != nil {
		return err
	}
	return nil
}

func (t *roleModelTable) Insert(ctx context.Context, d sqldb.Executor, m *Model) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (userid, role) VALUES ($1, $2);", m.Userid, m.Role)
	if err != nil {
		return err
	}
	return nil
}

func (t *roleModelTable) InsertBulk(ctx context.Context, d sqldb.Executor, models []*Model, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*2)
	for c, m := range models {
		n := c * 2
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d)", n+1, n+2))
		args = append(args, m.Userid, m.Role)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (userid, role) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *roleModelTable) GetModelByRole(ctx context.Context, d sqldb.Executor, role string, limit, offset int) (_ []Model, retErr error) {
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT userid, role FROM "+t.TableName+" WHERE role = $3 ORDER BY userid LIMIT $1 OFFSET $2;", limit, offset, role)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Userid, &m.Role); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *roleModelTable) DelByUserid(ctx context.Context, d sqldb.Executor, userid string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE userid = $1;", userid)
	return err
}

func (t *roleModelTable) GetModelByUserRole(ctx context.Context, d sqldb.Executor, userid string, role string) (*Model, error) {
	m := &Model{}
	if err := d.QueryRowContext(ctx, "SELECT userid, role FROM "+t.TableName+" WHERE userid = $1 AND role = $2;", userid, role).Scan(&m.Userid, &m.Role); err != nil {
		return nil, err
	}
	return m, nil
}

func (t *roleModelTable) GetModelByUserid(ctx context.Context, d sqldb.Executor, userid string, limit, offset int) (_ []Model, retErr error) {
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT userid, role FROM "+t.TableName+" WHERE userid = $3 ORDER BY role LIMIT $1 OFFSET $2;", limit, offset, userid)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Userid, &m.Role); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *roleModelTable) GetModelByUserRoles(ctx context.Context, d sqldb.Executor, userid string, roles []string, limit, offset int) (_ []Model, retErr error) {
	paramCount := 3
	args := make([]interface{}, 0, paramCount+len(roles))
	args = append(args, limit, offset, userid)
	var placeholdersroles string
	{
		placeholders := make([]string, 0, len(roles))
		for _, i := range roles {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersroles = strings.Join(placeholders, ", ")
	}
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT userid, role FROM "+t.TableName+" WHERE userid = $3 AND role IN (VALUES "+placeholdersroles+") LIMIT $1 OFFSET $2;", args...)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Userid, &m.Role); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *roleModelTable) GetModelByUserRolePrefix(ctx context.Context, d sqldb.Executor, userid string, rolePrefix string, limit, offset int) (_ []Model, retErr error) {
	res := make([]Model, 0, limit)
	rows, err := d.QueryContext(ctx, "SELECT userid, role FROM "+t.TableName+" WHERE userid = $3 AND role LIKE $4 ORDER BY role LIMIT $1 OFFSET $2;", limit, offset, userid, rolePrefix)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
			retErr = errors.Join(retErr, fmt.Errorf("Failed to close db rows: %w", err))
		}
	}()
	for rows.Next() {
		var m Model
		if err := rows.Scan(&m.Userid, &m.Role); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func (t *roleModelTable) DelByRoleUsers(ctx context.Context, d sqldb.Executor, role string, userids []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(userids))
	args = append(args, role)
	var placeholdersuserids string
	{
		placeholders := make([]string, 0, len(userids))
		for _, i := range userids {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersuserids = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE role = $1 AND userid IN (VALUES "+placeholdersuserids+");", args...)
	return err
}

func (t *roleModelTable) DelByUserRole(ctx context.Context, d sqldb.Executor, userid string, role string) error {
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE userid = $1 AND role = $2;", userid, role)
	return err
}

func (t *roleModelTable) DelByUserRoles(ctx context.Context, d sqldb.Executor, userid string, roles []string) error {
	paramCount := 1
	args := make([]interface{}, 0, paramCount+len(roles))
	args = append(args, userid)
	var placeholdersroles string
	{
		placeholders := make([]string, 0, len(roles))
		for _, i := range roles {
			paramCount++
			placeholders = append(placeholders, fmt.Sprintf("($%d)", paramCount))
			args = append(args, i)
		}
		placeholdersroles = strings.Join(placeholders, ", ")
	}
	_, err := d.ExecContext(ctx, "DELETE FROM "+t.TableName+" WHERE userid = $1 AND role IN (VALUES "+placeholdersroles+");", args...)
	return err
}
