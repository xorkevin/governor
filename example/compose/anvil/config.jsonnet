local anvil = import 'anvil:std';
local args = anvil.getargs();

{
  // middleware
  logger: {
    level: 'DEBUG',
    output: 'STDERR',
  },
  http: {
    addr: ':8080',
    basepath: '/api',
    maxreqsize: '2M',
    maxheadersize: '1M',
    maxconnread: '5s',
    maxconnheader: '2s',
    maxconnwrite: '5s',
    maxconnidle: '5s',
  },
  cors: {
    allowpaths: [
      '^/api/oauth/(token|userinfo|jwks)$',
    ],
  },
  routerewrite: [
    {
      host: args.server.shortlinkhost,
      methods: ['GET'],
      pattern: '^/([A-Za-z0-9_-]{2,}(?:/image)?)$',
      replace: '/api/courier/link/id/$1',
    },
    {
      host: args.server.host,
      methods: ['GET'],
      pattern: '^/\\.well-known/openid-configuration$',
      replace: '/api/oauth/openid-configuration',
    },
  ],
  vault: {
    filesource: '%s/secrets.yaml' % args.outputdir,
  },
  setupsecret: 'setupsecret',

  // services
  database: {
    auth: 'dbauth',
    dbname: 'postgres',
    host: 'localhost',
    port: 5432,
    sslmode: 'disable',
    hbinterval: '5s',
    hbmaxfail: 5,
  },
  kvstore: {
    auth: 'kvauth',
    dbname: 0,
    host: 'localhost',
    port: 6379,
    hbinterval: '5s',
    hbmaxfail: 5,
  },
  objstore: {
    auth: 'objauth',
    host: 'localhost',
    port: 9000,
    sslmode: false,
    location: 'us-east-1',
    hbinterval: '5s',
    hbmaxfail: 5,
  },
  pubsub: {
    auth: 'pubsubauth',
    host: 'localhost',
    port: 4222,
    hbinterval: '5s',
    hbmaxfail: 3,
  },
  events: {
    auth: 'eventsauth',
    host: 'localhost',
    port: 4222,
    hbinterval: '5s',
    hbmaxfail: 3,
  },
  template: {
    dir: '%s/templates' % args.outputdir,
  },
  mail: {
    auth: 'mailauth',
    host: 'localhost',
    port: 1025,
    msgiddomain: args.server.maildomain,
    returnpath: 'no-reply@%s' % args.server.mailspfdomain,
    fromaddress: 'no-reply@%s' % args.server.maildomain,
    fromname: 'Governor',
    streamsize: '200M',
    eventsize: '2K',
    mailkey: 'mailkey',
    hbinterval: '5s',
    hbmaxfail: 6,
    authrefresh: '1m',
  },
  mailinglist: {
    port: 2525,
    authdomain: args.server.mailinglistdomain,
    usrdomain: args.server.mailinglistdomain,
    orgdomain: args.server.orgmailinglistdomain,
    maxmsgsize: '2M',
    readtimeout: '5s',
    writetimeout: '5s',
    mockdnssource: '%s/mockdns.yaml' % args.outputdir,
    streamsize: '200M',
    eventsize: '2K',
  },
  ratelimit: {
    params: {
      auth: { expiration: 60, limit: 120, period: 15 },
      base: { expiration: 60, limit: 240, period: 15 },
    },
  },
  role: {
    rolecacheduration: '24h',
  },
  apikey: {
    scopecache: '24h',
  },
  token: {
    tokensecret: 'tokensecret',
    rsakey: 'rsakey',
    issuer: args.server.baseurl,
    audience: 'governor',
    hbinterval: '5s',
    hbmaxfail: 6,
    keyrefresh: '1m',
  },
  gate: {
    realm: args.server.httprealm,
  },
  user: {
    accessduration: '5m',
    refreshduration: '4380h',
    refreshcache: '24h',
    newloginemail: true,
    userapproval: false,
    confirmduration: '24h',
    passwordminsize: 8,
    passwordreset: true,
    passwordresetduration: '24h',
    passresetdelay: '0s',
    emailconfirmduration: '24h',
    email: {
      url: {
        base: args.server.uibaseurl,
        emailchange: '/a/confirm/email?key={{.Userid}}.{{.Key}}',
        forgotpass: '/x/resetpass?key={{.Userid}}.{{.Key}}',
        newuser: '/x/confirm?userid={{.Userid}}&key={{.Key}}',
      },
    },
    invitationduration: '24h',
    rolesummary: [
      'user',
      'admin',
      'usr.gov.user',
      'mod.gov.user',
      'usr.gov.oauth',
      'mod.gov.oauth',
      'usr.gov.ws',
      'mod.gov.ws',
    ],
    otpkey: 'otpkey',
    otpissuer: 'Governor',
    otprefresh: '1m',
    gcduration: '72h',
    streamsize: '200M',
    eventsize: '2K',
    hbinterval: '5s',
    hbmaxfail: 6,
    usercacheduration: '24h',
  },
  oauth: {
    codeduration: '1m',
    accessduration: '5m',
    refreshduration: '168h',
    realm: args.server.httprealm,
    issuer: args.server.baseurl,
    epauthorize: '%s/oauth/auth' % args.server.uibaseurl,
    ephost: args.server.baseurl,
    epprofile: '%s/u/{{.Username}}' % args.server.uibaseurl,
    eppicture: '%s/api/profile/id/{{.Userid}}/image' % args.server.uibaseurl,
    keycache: '24h',
  },
  org: {
    streamsize: '200M',
    eventsize: '2K',
  },
  courier: {
    fallbacklink: args.server.baseurl,
    linkprefix: args.server.shortlinkbaseurl,
    cacheduration: '24h',
  },
  conduit: {
    invitationduration: '72h',
    gcduration: '72h',
    streamsize: '200M',
    eventsize: '2K',
  },
}
